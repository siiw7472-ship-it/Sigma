-- Illusion Hub - Near-Completion Detection & Safe Tween
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ProximityPromptService = game:GetService("ProximityPromptService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Variables
local basePosition = nil
local isBaseSet = false
local monitoring = false
local escaping = false
local laserCape = nil
local Net = nil
local PlayerMouse = nil
local activePromptData = nil
local godModeConnection = nil

-- Find laser cape
local function findLaserCape()
    for _, tool in pairs(player.Backpack:GetChildren()) do
        if tool:IsA("Tool") and (tool.Name:lower():find("laser") or tool.Name:lower():find("cape")) then
            return tool
        end
    end
    
    if player.Character then
        for _, tool in pairs(player.Character:GetChildren()) do
            if tool:IsA("Tool") and (tool.Name:lower():find("laser") or tool.Name:lower():find("cape")) then
                return tool
            end
        end
    end
    return nil
end

-- Equip laser
local function equipLaser()
    laserCape = findLaserCape()
    if laserCape and laserCape.Parent == player.Backpack then
        player.Character.Humanoid:EquipTool(laserCape)
        return true
    end
    return false
end

-- Shoot laser
local function shootLaser()
    local character = player.Character
    if not character then return end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    -- Load modules if needed
    if not Net or not PlayerMouse then
        pcall(function()
            if ReplicatedStorage:FindFirstChild("Packages") then
                if ReplicatedStorage.Packages:FindFirstChild("Net") then
                    Net = require(ReplicatedStorage.Packages.Net)
                end
                if ReplicatedStorage.Packages:FindFirstChild("PlayerMouse") then
                    PlayerMouse = require(ReplicatedStorage.Packages.PlayerMouse)
                end
            end
        end)
    end
    
    -- Shoot
    pcall(function()
        if Net and PlayerMouse then
            PlayerMouse.Hit = {Position = rootPart.Position}
            PlayerMouse.Target = rootPart
            Net:RemoteEvent("UseItem"):FireServer(rootPart.Position, rootPart)
            print("Laser fired near completion")
        end
    end)
    
    pcall(function()
        if laserCape and laserCape.Parent == character then
            laserCape:Activate()
        end
    end)
end

-- Advanced god mode with anticheat protection
local function enableAdvancedGodMode()
    local character = player.Character
    if not character then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    humanoid.MaxHealth = math.huge
    humanoid.Health = math.huge
    
    -- Advanced protection loop
    godModeConnection = RunService.Heartbeat:Connect(function()
        if not escaping then return end
        
        if humanoid and humanoid.Parent then
            -- Health protection
            if humanoid.Health < humanoid.MaxHealth then
                humanoid.Health = humanoid.MaxHealth
            end
            
            -- State protection
            if humanoid.PlatformStand then
                humanoid.PlatformStand = false
            end
            if humanoid.Sit then
                humanoid.Sit = false
            end
            
            -- Death protection
            if humanoid:GetState() == Enum.HumanoidStateType.Dead then
                humanoid:ChangeState(Enum.HumanoidStateType.Running)
                humanoid.Health = humanoid.MaxHealth
            end
        end
    end)
    
    print("Advanced god mode enabled")
end

local function disableAdvancedGodMode()
    if godModeConnection then
        godModeConnection:Disconnect()
        godModeConnection = nil
    end
    
    local character = player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.MaxHealth = 100
            humanoid.Health = 100
        end
    end
    
    print("Advanced god mode disabled")
end

-- Safe anticheat-resistant tween
local function safeTweenToBase()
    if not basePosition or escaping then return end
    
    local character = player.Character
    if not character then return end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    escaping = true
    enableAdvancedGodMode()
    
    print("Starting safe tween sequence")
    status.Text = "SAFE ESCAPE IN PROGRESS..."
    status.TextColor3 = Color3.fromRGB(255, 100, 0)
    
    local startPos = rootPart.Position
    local targetPos = basePosition.Position
    local distance = (startPos - targetPos).Magnitude
    
    -- Medium speed calculation (not too fast, not too slow)
    local baseTime = distance / 80 -- 80 studs per second = medium speed
    local tweenTime = math.clamp(baseTime, 1.5, 4) -- Between 1.5-4 seconds
    
    -- Phase 1: Gradual ascent (anticheat friendly)
    local phase1Target = CFrame.new(startPos + Vector3.new(0, 40, 0))
    local phase1Tween = TweenService:Create(rootPart, 
        TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {CFrame = phase1Target}
    )
    
    phase1Tween:Play()
    print("Phase 1: Gradual ascent")
    
    phase1Tween.Completed:Connect(function()
        -- Small delay to seem natural
        task.wait(0.1)
        
        -- Phase 2: Medium-speed travel with curved path
        local midPoint = Vector3.new(
            startPos.X + (targetPos.X - startPos.X) * 0.5,
            math.max(startPos.Y, targetPos.Y) + 25,
            startPos.Z + (targetPos.Z - startPos.Z) * 0.5
        )
        
        local phase2Target = CFrame.new(midPoint)
        local phase2Tween = TweenService:Create(rootPart,
            TweenInfo.new(tweenTime * 0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
            {CFrame = phase2Target}
        )
        
        phase2Tween:Play()
        print("Phase 2: Curved travel to midpoint")
        
        phase2Tween.Completed:Connect(function()
            -- Small delay between phases
            task.wait(0.05)
            
            -- Phase 3: Approach target area
            local phase3Target = CFrame.new(targetPos + Vector3.new(0, 20, 0))
            local phase3Tween = TweenService:Create(rootPart,
                TweenInfo.new(tweenTime * 0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                {CFrame = phase3Target}
            )
            
            phase3Tween:Play()
            print("Phase 3: Approaching target")
            
            phase3Tween.Completed:Connect(function()
                -- Small delay before final descent
                task.wait(0.1)
                
                -- Phase 4: Gentle landing
                local phase4Tween = TweenService:Create(rootPart,
                    TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {CFrame = basePosition}
                )
                
                phase4Tween:Play()
                print("Phase 4: Gentle landing")
                
                phase4Tween.Completed:Connect(function()
                    -- Ensure exact position
                    task.wait(0.1)
                    rootPart.CFrame = basePosition
                    
                    -- Final security shot
                    shootLaser()
                    
                    print("Safe escape completed successfully")
                    status.Text = "Safe escape completed!"
                    status.TextColor3 = Color3.fromRGB(0, 255, 0)
                    
                    -- Gradual cleanup
                    task.wait(2)
                    disableAdvancedGodMode()
                    escaping = false
                    
                    -- Auto restart monitoring
                    if isBaseSet then
                        task.wait(1)
                        status.Text = "Monitoring active..."
                        status.TextColor3 = Color3.fromRGB(255, 255, 0)
                    end
                end)
            end)
        end)
    end)
end

-- Near-completion detection system
local function startNearCompletionMonitoring()
    if monitoring then return end
    
    monitoring = true
    print("Starting near-completion monitoring")
    
    -- Use PromptButtonHoldBegan for immediate detection
    local holdBeganConnection = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt, playerWhoTriggered)
        if playerWhoTriggered ~= player then return end
        if escaping then return end
        if not basePosition then return end
        
        print("Hold began on prompt:", prompt.ObjectText or "Unknown")
        
        local holdTime = prompt.HoldDuration or 3
        
        -- Calculate near-completion timing (85% of hold duration)
        local nearCompletionDelay = holdTime * 0.85
        
        print("Hold duration:", holdTime, "- Will fire laser at", nearCompletionDelay, "seconds (85% completion)")
        
        status.Text = "PROMPT DETECTED - WAITING..."
        status.TextColor3 = Color3.fromRGB(255, 255, 0)
        
        -- Store active prompt data
        activePromptData = {
            prompt = prompt,
            startTime = tick(),
            holdTime = holdTime,
            nearCompletionDelay = nearCompletionDelay
        }
        
        -- Wait for near-completion then fire laser and escape
        spawn(function()
            task.wait(nearCompletionDelay)
            
            if activePromptData and monitoring and not escaping then
                print("NEAR COMPLETION REACHED - FIRING LASER AND ESCAPING!")
                
                status.Text = "NEAR COMPLETION - LASER + ESCAPE!"
                status.TextColor3 = Color3.fromRGB(255, 0, 0)
                
                -- Equip and shoot laser at near-completion
                equipLaser()
                task.wait(0.1)
                shootLaser()
                
                -- Small delay then start safe escape
                task.wait(0.2)
                safeTweenToBase()
                
                -- Clear active prompt data
                activePromptData = nil
            end
        end)
    end)
    
    -- Use PromptButtonHoldEnded to clear data if released early
    local holdEndedConnection = ProximityPromptService.PromptButtonHoldEnded:Connect(function(prompt, playerWhoTriggered)
        if playerWhoTriggered ~= player then return end
        
        if activePromptData and activePromptData.prompt == prompt then
            print("Hold ended early - clearing prompt data")
            activePromptData = nil
            
            if not escaping then
                status.Text = "Hold ended early"
                status.TextColor3 = Color3.fromRGB(150, 150, 150)
                
                -- Reset status after a moment
                task.wait(2)
                if monitoring and not escaping then
                    status.Text = "Monitoring active..."
                    status.TextColor3 = Color3.fromRGB(255, 255, 0)
                end
            end
        end
    end)
    
    -- Store connections for cleanup
    monitoring = {
        holdBegan = holdBeganConnection,
        holdEnded = holdEndedConnection
    }
end

-- Stop monitoring
local function stopNearCompletionMonitoring()
    if not monitoring then return end
    
    print("Stopping near-completion monitoring")
    
    if type(monitoring) == "table" then
        for _, connection in pairs(monitoring) do
            if connection and connection.Disconnect then
                connection:Disconnect()
            end
        end
    end
    
    monitoring = false
    activePromptData = nil
end

-- GUI (same as before but with updated text)
if playerGui:FindFirstChild("IllusionHub") then
    playerGui:FindFirstChild("IllusionHub"):Destroy()
end

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "IllusionHub"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 220, 0, 120)
frame.Position = UDim2.new(0.5, -110, 0.1, 0)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.BorderSizePixel = 0
frame.Parent = screenGui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 10)
corner.Parent = frame

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
title.BorderSizePixel = 0
title.Text = "Illusion Hub - Near Completion"
title.TextColor3 = Color3.fromRGB(100, 200, 255)
title.TextScaled = true
title.Font = Enum.Font.GothamBold
title.Parent = frame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 10)
titleCorner.Parent = title

local setBaseBtn = Instance.new("TextButton")
setBaseBtn.Size = UDim2.new(0.9, 0, 0, 25)
setBaseBtn.Position = UDim2.new(0.05, 0, 0.3, 0)
setBaseBtn.BackgroundColor3 = Color3.fromRGB(70, 130, 255)
setBaseBtn.BorderSizePixel = 0
setBaseBtn.Text = "Set Base"
setBaseBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
setBaseBtn.TextScaled = true
setBaseBtn.Font = Enum.Font.Gotham
setBaseBtn.Parent = frame

local setBtnCorner = Instance.new("UICorner")
setBtnCorner.CornerRadius = UDim.new(0, 5)
setBtnCorner.Parent = setBaseBtn

local monitorBtn = Instance.new("TextButton")
monitorBtn.Size = UDim2.new(0.9, 0, 0, 25)
monitorBtn.Position = UDim2.new(0.05, 0, 0.55, 0)
monitorBtn.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
monitorBtn.BorderSizePixel = 0
monitorBtn.Text = "Start Monitor"
monitorBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
monitorBtn.TextScaled = true
monitorBtn.Font = Enum.Font.Gotham
monitorBtn.Parent = frame

local monBtnCorner = Instance.new("UICorner")
monBtnCorner.CornerRadius = UDim.new(0, 5)
monBtnCorner.Parent = monitorBtn

local status = Instance.new("TextLabel")
status.Size = UDim2.new(0.9, 0, 0, 20)
status.Position = UDim2.new(0.05, 0, 0.8, 0)
status.BackgroundTransparency = 1
status.Text = "Set base location first"
status.TextColor3 = Color3.fromRGB(200, 200, 200)
status.TextScaled = true
status.Font = Enum.Font.Gotham
status.Parent = frame

-- Set Base
setBaseBtn.MouseButton1Click:Connect(function()
    local character = player.Character
    if not character then return end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    basePosition = rootPart.CFrame
    isBaseSet = true
    
    setBaseBtn.Text = "Base Set"
    setBaseBtn.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
    status.Text = "Base set - ready to monitor"
    status.TextColor3 = Color3.fromRGB(0, 255, 0)
    
    monitorBtn.BackgroundColor3 = Color3.fromRGB(255, 150, 0)
    
    print("Base set at:", basePosition.Position)
end)

-- Monitor
monitorBtn.MouseButton1Click:Connect(function()
    if not isBaseSet then
        status.Text = "Set base first!"
        status.TextColor3 = Color3.fromRGB(255, 0, 0)
        return
    end
    
    if not monitoring then
        startNearCompletionMonitoring()
        monitorBtn.Text = "Stop Monitor"
        monitorBtn.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        status.Text = "Monitoring active..."
        status.TextColor3 = Color3.fromRGB(255, 255, 0)
    else
        stopNearCompletionMonitoring()
        monitorBtn.Text = "Start Monitor"
        monitorBtn.BackgroundColor3 = Color3.fromRGB(255, 150, 0)
        status.Text = "Monitoring stopped"
        status.TextColor3 = Color3.fromRGB(150, 150, 150)
    end
end)

-- Drag functionality
local dragging = false
local dragStart = nil
local startPos = nil

title.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or 
       input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
    end
end)

title.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or 
                     input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end
end)

title.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or 
       input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)

-- Manual keybinds
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.R and isBaseSet and not escaping then
        safeTweenToBase()
    elseif input.KeyCode == Enum.KeyCode.L then
        equipLaser()
        task.wait(0.1)
        shootLaser()
        print("Manual laser test")
    end
end)

-- Setup
spawn(function()
    task.wait(2)
    laserCape = findLaserCape()
    if laserCape then
        print("Laser cape found:", laserCape.Name)
        equipLaser()
    else
        print("Laser cape not found")
    end
end)

-- Cleanup
player.CharacterRemoving:Connect(function()
    stopNearCompletionMonitoring()
    disableAdvancedGodMode()
    escaping = false
end)

print("Illusion Hub - Near-Completion Detection System Loaded")
print("Features:")
print("- Fires laser at 85% prompt completion")
print("- Safe medium-speed 4-phase tween")
print("- Advanced anticheat-resistant movement")
print("- Auto-restarts monitoring after escape")
print("Manual: R = Safe escape, L = Test laser")
